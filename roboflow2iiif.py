"""
Converts Roboflow annotations to IIIF format (API Presentation 2.0)
Works for a Gallica document whose annotations are stored in a folder named after its ARK.
The annotations can then be loaded into an IIIF viewer.

Inputs needeed:
- a folder containing the Roboflow JSON files (one file per image) in supervision format

Parameters:
- a folder of JSON files
- the ratio between the scan size of the image (the one used in the IIIF manifest) 
    and the size of the image processed during inference 
- -d option for displaying the annotated images during inference
- -s option for saving these images

Usage:
>python roboflow2iiif.py folder ratio
Example:
>python roboflow2iiif.py JSON/bpt6k70557r 0.7

Output:
- a single IIIF annotations file in the "IIIF_annotations" folder

Notes:
1. The ratio between the scan size of the image (the one used in the IIIF manifest)
 and the size of the image processed during inference must be provided
 If the image was downloaded with the IIIF Image API, this is the pct:n parameter; for example, 0.7 for pct:70
 If the image was downloaded at its maximum size, the ratio is 1.0

2. The format of the input Roboflow JSON file is the one produced by the supervision/JSON Sink class
"""

import json
import argparse
import os

import utils

# Folders
output_dir = 'IIIF_annotations'

parser = argparse.ArgumentParser(description='Convert Roboflow annotations to IIIF annotations (API Presentation 2.0)')
parser.add_argument('folder',  type=str,
                    help='Roboflow JSON data folder')
parser.add_argument('ratio',  type=float, default=1.0,
                    help='image dimension ratio')

args = parser.parse_args()
data_folder=args.folder
ratio=args.ratio



print("---------------------------------------")
print("...processing: ", data_folder)
print("...output in: ", output_dir)

# Create the output directory if it doesn't exist
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# create an annotation 
def create_annotation(id, body, target, label=None):
    annotation = {
        "@context": "http://iiif.io/api/presentation/2/context.json",
        "@id": f"https://gallica.bnf.fr/iiif/ark:/12148/{ark}/{id}",
        "@type": "oa:Annotation",
        "motivation": "oa:describing",
        "resource": body,
        "on": f"https://gallica.bnf.fr/iiif/ark:/12148/{ark}/canvas/f{page}#xywh={target}",
    }
    #print (f"https://gallica.bnf.fr/iiif/ark:/12148/{ark}/canvas/f{page}#xywh={target}")
    return annotation

# write the annotations file for one image
def write_annotations_to_file(filename, ark, page, annotations, last):
    with open(filename, 'a') as f:
        f.write(f"\"https://gallica.bnf.fr/iiif/ark:/12148/{ark}/canvas/f{page}\"")
        f.write(": ")
        # annotations list
        json.dump(annotations, f, indent=4)
        if last:
            f.write("\n}}")
        else:
            f.write(",\n")
            

# write only the header of the IIIF annotations file
def create_header(filename, ark):
    with open(filename, 'w') as f:
        f.write("{")
        f.write(f"\"https://gallica.bnf.fr/iiif/ark:/12148/{ark}/manifest.json\"")
        f.write(": {\n")


def create_annotations_from_file(filename, ark, page):
    with open(filename, 'r') as f:
        data = json.load(f)

    annotations = []
    for i, prediction in enumerate(data):
        id = f"{ark}-{page}-{i}"
        x = prediction["x_min"]
        y = prediction["y_min"]
        width = prediction["x_max"] - x
        height = prediction["y_max"] - y
        class_name = prediction["class_name"]
        conf = prediction["confidence"]
        label = f"<b>{class_name}</b>"
        target = f"{int(x/ratio)},{int(y/ratio)},{int(width/ratio)},{int(height/ratio)}"
        color = utils.get_color_by_class(class_name)   
        body = [{
        "@type": "dctypes:Text",
        "format": "text/html",
        "chars": f"<p style='color:{color};font-size:30%;'>{label} <small>(generated by Roboflow, confidence: {conf}, modele: snooptypo/2)</small></p>"}]
        annotation = create_annotation(id, body, target, label)
        annotations.append(annotation)
    return annotations

####        MAIN         ###
data_files = [os.path.join(data_folder, file) for file in os.listdir(data_folder) if file.endswith('.json')]
print(f"Number of JSON files to process: {len(data_files)}\n----------------------")

# the folder name is the ARK identifier
ark =  os.path.basename(os.path.normpath(data_folder))
print("for ARK: ", ark)
iiif_file = f"{output_dir}/{ark}_iiif.json"
create_header(iiif_file, ark)

for data_file in data_files:
    print(f"...processing file: {data_file}")
    page = int(os.path.basename(data_file).split('-')[1][:4])  # Extract 4-digit page number from the file name
    page = int(page)
    #out = f"{output_dir}/{ark}-{str(page)}_iiif.json"
    annotations = create_annotations_from_file(data_file, ark, page)
    write_annotations_to_file(iiif_file, ark, page, annotations, data_file == data_files[-1])

print(f"Output in: {iiif_file}")
